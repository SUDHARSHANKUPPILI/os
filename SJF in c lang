#include <stdio.h>
#include <stdlib.h>

// Function to swap two integers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to sort processes by arrival time and then by burst time
void sort_processes(int p[], int at[], int bt[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (at[i] > at[j]) {
                swap(&p[i], &p[j]);
                swap(&at[i], &at[j]);
                swap(&bt[i], &bt[j]);
            } else if (at[i] == at[j] && bt[i] > bt[j]) {
                swap(&p[i], &p[j]);
                swap(&at[i], &at[j]);
                swap(&bt[i], &bt[j]);
            }
        }
    }
}

// Function to calculate turnaround and waiting times
void calculate_times(int ct[], int at[], int bt[], int tat[], int wt[], int n) {
    for (int i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Allocate memory for arrays
    int *p = (int*)malloc(n * sizeof(int));
    int *at = (int*)malloc(n * sizeof(int));
    int *bt = (int*)malloc(n * sizeof(int));
    int *ct = (int*)malloc(n * sizeof(int));
    int *wt = (int*)malloc(n * sizeof(int));
    int *tat = (int*)malloc(n * sizeof(int));

    if (!p || !at || !bt || !ct || !wt || !tat) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Input process details
    printf("Enter process details (ID, Arrival Time, Burst Time):\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &p[i], &at[i], &bt[i]);
    }

    // Sort processes
    sort_processes(p, at, bt, n);

    // Calculate completion times using SJF (Shortest Job First) scheduling
    ct[0] = at[0] + bt[0];
    for (int i = 1; i < n; i++) {
        int min_burst = bt[i];
        int pos = i;
        for (int j = i + 1; j < n; j++) {
            if (at[j] <= ct[i - 1] && bt[j] < min_burst) {
                min_burst = bt[j];
                pos = j;
            }
        }
        if (pos != i) {
            swap(&p[i], &p[pos]);
            swap(&at[i], &at[pos]);
            swap(&bt[i], &bt[pos]);
        }
        ct[i] = ct[i - 1] + bt[i];
    }

    // Calculate turnaround and waiting times
    calculate_times(ct, at, bt, tat, wt, n);

    // Display results
    printf("\nProcess\t Arrival\t Burst\t Completion\t Turnaround\t Waiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t %d\t %d\t %d\t %d\t %d\n", p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    // Calculate average turnaround and waiting times
    float avg_tat = 0, avg_wt = 0;
    for (int i = 0; i < n; i++) {
        avg_tat += tat[i];
        avg_wt += wt[i];
    }
    avg_tat /= n;
    avg_wt /= n;

    printf("\nAverage Turnaround Time = %.2f\n", avg_tat);
    printf("Average Waiting Time = %.2f\n", avg_wt);

    // Free allocated memory
    free(p);
    free(at);
    free(bt);
    free(ct);
    free(wt);
    free(tat);

    return 0;
}
